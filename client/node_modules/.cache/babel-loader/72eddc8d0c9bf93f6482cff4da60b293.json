{"ast":null,"code":"var _jsxFileName = \"/home/yagodka/Desktop/tic-tac-toe/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { io } from \"socket.io-client\";\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\nimport JoinGame from \"./components/JoinGame\";\nimport GameField from \"./components/GameField\";\nimport SocketService from \"./services/SocketService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar socket;\n\nfunction App() {\n  _s();\n\n  const setUpListeners = socket => {\n    //Listening for establishing connection with server\n    socket.on(\"connect\", () => {\n      console.log(\"Made connection\");\n    });\n    socket.on(\"connect_error\", err => {\n      console.log(\"Didn't make connection: \" + err);\n    }); //Listening for successfully joining the socket's room\n\n    socket.on(\"join_room_success\", message => {\n      console.log(\"Successfully joined the room \" + message.roomId);\n      setRoomId(message.roomId);\n    }); //Listening for error while joining the socket's room\n\n    socket.on(\"join_room_error\", message => {\n      alert(message.error);\n    }); //Listening for successfully leaving the socket's room\n\n    socket.on(\"leave_room_success\", message => {\n      console.log(message.roomId);\n      setRoomId(\"\");\n    }); //Listening for successfully completing the move\n\n    socket.on(\"end_of_move\", () => {\n      setRoomId(message.roomId);\n    });\n  };\n\n  function drawFigure(index) {\n    console.log(\"index: \" + index);\n    let abortDrawing = false;\n    const tempGameState = gameState.map((boardCell, i) => {\n      if (i === index) {\n        if (boardCell === \"\") {\n          socket.emit(\"new_move\", {\n            figure: \"X\",\n            position: i\n          });\n          return \"X\";\n        } else {\n          alert(\"Can't reassign a cell\");\n          abortDrawing = true;\n          return boardCell;\n        }\n      } else {\n        return boardCell;\n      }\n    });\n\n    if (!abortDrawing) {\n      setGameState(tempGameState);\n    }\n  }\n\n  function cleanBoard() {\n    let arr = new Array(9);\n\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = \"\";\n    }\n\n    setGameState(arr);\n  }\n\n  function leaveGame() {\n    cleanBoard();\n    console.log(roomId);\n    console.log(socket);\n    socket.emit(\"leave_game\", {\n      roomId: roomId\n    });\n    setRoomId(\"\");\n  }\n\n  let navigate = useNavigate();\n  const [gameId, setGameId] = useState(\"\");\n  const [roomId, setRoomId] = useState(\"\");\n  let arr = new Array(9);\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = \"\";\n  }\n\n  const [gameState, setGameState] = useState(arr);\n  const [isActive, setIsActive] = useState(false);\n\n  const connect = () => {\n    socket = io(\"http://localhost:9003\");\n    setUpListeners(socket);\n  }; // const connectSocket = async () => {\n  //   socket = await SocketService.connect(\"http://localhost:9002\").catch((err) => {\n  //     console.log(\"Error: \", err);\n  //   }, []);\n  // }\n\n\n  useEffect(() => {\n    connect(); //---OR---//\n    // SocketService.connect(\"http://localhost:9002\").then((result) => {\n    //   socket = result;\n    // });\n    //---OR---//\n    // connectSocket();\n  }, []);\n\n  const submitForm = e => {\n    e.preventDefault();\n\n    if (gameId !== \"\") {\n      if (socket) {\n        socket.emit(\"join_game\", {\n          \"roomId\": gameId\n        });\n      }\n\n      setRoomId(gameId);\n      navigate(\"/game/\" + gameId);\n      setGameId(\"\");\n    } else {\n      alert(\"Enter the id of the room\");\n    }\n  };\n\n  const changeGameId = e => {\n    setGameId(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(JoinGame, {\n          gameId: gameId,\n          functions: {\n            submitForm,\n            changeGameId\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/game/:gameId\",\n        element: /*#__PURE__*/_jsxDEV(GameField, {\n          gameState: gameState,\n          roomId: roomId,\n          functions: {\n            drawFigure,\n            cleanBoard,\n            leaveGame\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"DlQO2EYCIPvMZYlzMKMsK1SRJjc=\", false, function () {\n  return [useNavigate];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/yagodka/Desktop/tic-tac-toe/client/src/App.js"],"names":["React","useEffect","useState","logo","io","Routes","Route","useNavigate","JoinGame","GameField","SocketService","socket","App","setUpListeners","on","console","log","err","message","roomId","setRoomId","alert","error","drawFigure","index","abortDrawing","tempGameState","gameState","map","boardCell","i","emit","figure","position","setGameState","cleanBoard","arr","Array","length","leaveGame","navigate","gameId","setGameId","isActive","setIsActive","connect","submitForm","e","preventDefault","changeGameId","target","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport {io} from \"socket.io-client\";\nimport {Routes, Route, useNavigate} from \"react-router-dom\";\n\nimport JoinGame from \"./components/JoinGame\";\nimport GameField from \"./components/GameField\";\nimport SocketService from \"./services/SocketService\";\n\nvar socket;\n\nfunction App() {\n\n  const setUpListeners = (socket) => {\n    //Listening for establishing connection with server\n    socket.on(\"connect\", () => {\n      console.log(\"Made connection\");\n    });\n\n    socket.on(\"connect_error\", (err) => {\n      console.log(\"Didn't make connection: \" + err);\n    });\n\n    //Listening for successfully joining the socket's room\n    socket.on(\"join_room_success\", (message) => {\n      console.log(\"Successfully joined the room \" + message.roomId);\n      setRoomId(message.roomId);\n    });\n\n    //Listening for error while joining the socket's room\n    socket.on(\"join_room_error\", (message) => {\n      alert(message.error);\n    });\n\n    //Listening for successfully leaving the socket's room\n    socket.on(\"leave_room_success\", (message) => {\n      console.log(message.roomId);\n      setRoomId(\"\");\n    });\n\n    //Listening for successfully completing the move\n    socket.on(\"end_of_move\", () => {\n\n      setRoomId(message.roomId);\n    });\n  }\n\n  function drawFigure(index){\n    console.log(\"index: \" + index);\n    let abortDrawing = false;\n    const tempGameState = gameState.map((boardCell, i) => {\n      if(i === index){\n        if(boardCell === \"\"){\n          socket.emit(\"new_move\", {figure: \"X\", position: i});\n          return \"X\";\n        }else{\n          alert(\"Can't reassign a cell\");\n          abortDrawing = true;\n          return boardCell;\n        }\n      }else{\n        return boardCell;\n      }\n    });\n    if(!abortDrawing){\n      setGameState(tempGameState);\n    }\n  }\n\n  function cleanBoard(){\n    let arr = new Array(9);\n    for(let i = 0; i < arr.length; i++){\n      arr[i] = \"\";\n    }\n    setGameState(arr);\n  }\n\n  function leaveGame(){\n    cleanBoard();\n    console.log(roomId);\n    console.log(socket);\n    socket.emit(\"leave_game\", {roomId: roomId});\n    setRoomId(\"\");\n  }\n\n  let navigate = useNavigate();\n  const [gameId, setGameId] = useState(\"\");\n  const [roomId, setRoomId] = useState(\"\");\n\n  let arr = new Array(9);\n  for(let i = 0; i < arr.length; i++){\n    arr[i] = \"\";\n  }\n  const [gameState, setGameState] = useState(arr);\n\n  const [isActive, setIsActive] = useState(false);\n\n  const connect = () => {\n    socket = io(\"http://localhost:9003\");\n    setUpListeners(socket);\n  }\n\n  // const connectSocket = async () => {\n  //   socket = await SocketService.connect(\"http://localhost:9002\").catch((err) => {\n  //     console.log(\"Error: \", err);\n  //   }, []);\n  // }\n\n  useEffect(() => {\n    connect();\n    //---OR---//\n    // SocketService.connect(\"http://localhost:9002\").then((result) => {\n    //   socket = result;\n    // });\n    //---OR---//\n    // connectSocket();\n  }, []);\n\n  const submitForm = (e) => {\n    e.preventDefault();\n    if(gameId !== \"\"){\n      if(socket){\n        socket.emit(\"join_game\", {\"roomId\": gameId});\n      }\n      setRoomId(gameId);\n      navigate(\"/game/\" + gameId);\n      setGameId(\"\");\n    }else{\n      alert(\"Enter the id of the room\");\n    }\n  }\n\n  const changeGameId = (e) => {\n    setGameId(e.target.value);\n  }\n\n  return (\n    <>\n      <Routes>\n        <Route path = \"/\" element = {<JoinGame gameId = {gameId} functions = {{submitForm, changeGameId}}/>}/>\n        <Route path = \"/game/:gameId\" element = {<GameField gameState = {gameState} roomId = {roomId}\n                                      functions = {{drawFigure, cleanBoard, leaveGame}}/>}/>\n      </Routes>\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}