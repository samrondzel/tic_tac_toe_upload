{"ast":null,"code":"var _jsxFileName = \"/home/yagodka/Desktop/tic-tac-toe/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { io } from \"socket.io-client\";\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\nimport JoinGame from \"./components/JoinGame\";\nimport GameField from \"./components/GameField\";\nimport SocketService from \"./services/SocketService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar socket;\n\nfunction App() {\n  _s();\n\n  const setUpListeners = socket => {\n    //Listening for establishing connection with server\n    socket.on(\"connect\", () => {\n      console.log(\"Made connection\");\n    });\n    socket.on(\"connect_error\", err => {\n      console.log(\"Didn't make connection: \" + err);\n    }); //Listening for successfully joining the socket's room\n\n    socket.on(\"join_room_success\", message => {\n      console.log(\"Successfully joined the room \" + message.roomId);\n      setRoomId(message.roomId);\n      setIsActive(message.isActive);\n      setFigure(message.figure);\n    }); //Listening to starting the game - when both players have joined\n\n    socket.on(\"game_can_start\", () => {\n      setGameCanStart(true);\n    }); //Listening to ending the game - when any of the players has left\n\n    socket.on(\"game_finished\", () => {\n      setGameCanStart(false);\n    }); //Listening for error while joining the socket's room\n\n    socket.on(\"join_room_error\", message => {\n      alert(message.error);\n    }); //Listening for successfully leaving the socket's room\n\n    socket.on(\"leave_room_success\", message => {\n      console.log(message.roomId);\n      setRoomId(\"\");\n    }); //Listening for completing the move\n\n    socket.on(\"end_of_move\", () => {\n      setIsActive(false);\n    }); //Listening for starting the move\n\n    socket.on(\"start_of_move\", opponentsMove => {\n      let opponentsFigure = opponentsMove.figure;\n      let opponentsPosition = opponentsMove.position;\n      let currentBoardState = opponentsMove.currentBoardState;\n      const tempGameState = currentBoardState.map((boardCell, i) => {\n        return i === opponentsPosition ? opponentsFigure : boardCell;\n      });\n      setGameState(tempGameState);\n      setIsActive(true);\n    });\n  };\n\n  function drawFigure(figure, index) {\n    console.log(\"index: \" + index);\n    let abortDrawing = false;\n    const tempGameState = gameState.map((boardCell, i) => {\n      if (i === index) {\n        if (boardCell === \"\") {\n          socket.emit(\"new_move\", {\n            figure: figure,\n            position: i\n          });\n          return figure;\n        } else {\n          alert(\"Can't reassign a cell\");\n          abortDrawing = true;\n          return boardCell;\n        }\n      } else {\n        return boardCell;\n      }\n    });\n\n    if (!abortDrawing) {\n      setGameState(tempGameState);\n    }\n  }\n\n  function cleanBoard() {\n    let arr = new Array(9);\n\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = \"\";\n    }\n\n    setGameState(arr);\n  }\n\n  function leaveGame() {\n    cleanBoard();\n    socket.emit(\"leave_game\", {\n      roomId: roomId\n    });\n    setRoomId(\"\");\n  }\n\n  let navigate = useNavigate();\n  const [gameId, setGameId] = useState(\"\");\n  const [roomId, setRoomId] = useState(\"\");\n  let arr = new Array(9);\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = \"\";\n  }\n\n  const [gameState, setGameState] = useState(arr);\n  const [isActive, setIsActive] = useState(false);\n  const [gameCanStart, setGameCanStart] = useState(false);\n  const [figure, setFigure] = useState(\"\");\n\n  const connect = () => {\n    socket = io(\"http://localhost:9004\");\n    setUpListeners(socket);\n  }; // const connectSocket = async () => {\n  //   socket = await SocketService.connect(\"http://localhost:9002\").catch((err) => {\n  //     console.log(\"Error: \", err);\n  //   }, []);\n  // }\n\n\n  useEffect(() => {\n    connect(); //---OR---//\n    // SocketService.connect(\"http://localhost:9002\").then((result) => {\n    //   socket = result;\n    // });\n    //---OR---//\n    // connectSocket();\n  }, []);\n\n  const submitForm = e => {\n    e.preventDefault();\n\n    if (gameId !== \"\") {\n      if (socket) {\n        socket.emit(\"join_game\", {\n          \"roomId\": gameId\n        });\n      }\n\n      setRoomId(gameId);\n      navigate(\"/game/\" + gameId);\n      setGameId(\"\");\n    } else {\n      alert(\"Enter the id of the room\");\n    }\n  };\n\n  const changeGameId = e => {\n    setGameId(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(JoinGame, {\n          gameId: gameId,\n          functions: {\n            submitForm,\n            changeGameId\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/game/:gameId\",\n        element: /*#__PURE__*/_jsxDEV(GameField, {\n          figure: figure,\n          isActive: isActive,\n          gameState: gameState,\n          roomId: roomId,\n          gameCanStart: gameCanStart,\n          functions: {\n            drawFigure,\n            cleanBoard,\n            leaveGame\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"U760rTjrHCyZXS3AFo87crTeFRI=\", false, function () {\n  return [useNavigate];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/yagodka/Desktop/tic-tac-toe/client/src/App.js"],"names":["React","useEffect","useState","logo","io","Routes","Route","useNavigate","JoinGame","GameField","SocketService","socket","App","setUpListeners","on","console","log","err","message","roomId","setRoomId","setIsActive","isActive","setFigure","figure","setGameCanStart","alert","error","opponentsMove","opponentsFigure","opponentsPosition","position","currentBoardState","tempGameState","map","boardCell","i","setGameState","drawFigure","index","abortDrawing","gameState","emit","cleanBoard","arr","Array","length","leaveGame","navigate","gameId","setGameId","gameCanStart","connect","submitForm","e","preventDefault","changeGameId","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,SAAQC,EAAR,QAAiB,kBAAjB;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,WAAvB,QAAyC,kBAAzC;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;;;AAEA,IAAIC,MAAJ;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAMC,cAAc,GAAIF,MAAD,IAAY;AACjC;AACAA,IAAAA,MAAM,CAACG,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,KAFD;AAIAL,IAAAA,MAAM,CAACG,EAAP,CAAU,eAAV,EAA4BG,GAAD,IAAS;AAClCF,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BC,GAAzC;AACD,KAFD,EANiC,CAUjC;;AACAN,IAAAA,MAAM,CAACG,EAAP,CAAU,mBAAV,EAAgCI,OAAD,IAAa;AAC1CH,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCE,OAAO,CAACC,MAAtD;AACAC,MAAAA,SAAS,CAACF,OAAO,CAACC,MAAT,CAAT;AACAE,MAAAA,WAAW,CAACH,OAAO,CAACI,QAAT,CAAX;AACAC,MAAAA,SAAS,CAACL,OAAO,CAACM,MAAT,CAAT;AACD,KALD,EAXiC,CAkBjC;;AACAb,IAAAA,MAAM,CAACG,EAAP,CAAU,gBAAV,EAA4B,MAAM;AAChCW,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KAFD,EAnBiC,CAuBjC;;AACAd,IAAAA,MAAM,CAACG,EAAP,CAAU,eAAV,EAA2B,MAAM;AAC/BW,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAFD,EAxBiC,CA4BjC;;AACAd,IAAAA,MAAM,CAACG,EAAP,CAAU,iBAAV,EAA8BI,OAAD,IAAa;AACxCQ,MAAAA,KAAK,CAACR,OAAO,CAACS,KAAT,CAAL;AACD,KAFD,EA7BiC,CAiCjC;;AACAhB,IAAAA,MAAM,CAACG,EAAP,CAAU,oBAAV,EAAiCI,OAAD,IAAa;AAC3CH,MAAAA,OAAO,CAACC,GAAR,CAAYE,OAAO,CAACC,MAApB;AACAC,MAAAA,SAAS,CAAC,EAAD,CAAT;AACD,KAHD,EAlCiC,CAuCjC;;AACAT,IAAAA,MAAM,CAACG,EAAP,CAAU,aAAV,EAAyB,MAAM;AAC7BO,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAFD,EAxCiC,CA4CjC;;AACAV,IAAAA,MAAM,CAACG,EAAP,CAAU,eAAV,EAA4Bc,aAAD,IAAmB;AAC5C,UAAIC,eAAe,GAAGD,aAAa,CAACJ,MAApC;AACA,UAAIM,iBAAiB,GAAGF,aAAa,CAACG,QAAtC;AACA,UAAIC,iBAAiB,GAAGJ,aAAa,CAACI,iBAAtC;AACA,YAAMC,aAAa,GAAGD,iBAAiB,CAACE,GAAlB,CAAsB,CAACC,SAAD,EAAYC,CAAZ,KAAkB;AAC5D,eAAOA,CAAC,KAAKN,iBAAN,GAA0BD,eAA1B,GAA4CM,SAAnD;AACD,OAFqB,CAAtB;AAGAE,MAAAA,YAAY,CAACJ,aAAD,CAAZ;AACAZ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KATD;AAUD,GAvDD;;AAyDA,WAASiB,UAAT,CAAoBd,MAApB,EAA4Be,KAA5B,EAAkC;AAChCxB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYuB,KAAxB;AACA,QAAIC,YAAY,GAAG,KAAnB;AACA,UAAMP,aAAa,GAAGQ,SAAS,CAACP,GAAV,CAAc,CAACC,SAAD,EAAYC,CAAZ,KAAkB;AACpD,UAAGA,CAAC,KAAKG,KAAT,EAAe;AACb,YAAGJ,SAAS,KAAK,EAAjB,EAAoB;AAClBxB,UAAAA,MAAM,CAAC+B,IAAP,CAAY,UAAZ,EAAwB;AAAClB,YAAAA,MAAM,EAAEA,MAAT;AAAiBO,YAAAA,QAAQ,EAAEK;AAA3B,WAAxB;AACA,iBAAOZ,MAAP;AACD,SAHD,MAGK;AACHE,UAAAA,KAAK,CAAC,uBAAD,CAAL;AACAc,UAAAA,YAAY,GAAG,IAAf;AACA,iBAAOL,SAAP;AACD;AACF,OATD,MASK;AACH,eAAOA,SAAP;AACD;AACF,KAbqB,CAAtB;;AAcA,QAAG,CAACK,YAAJ,EAAiB;AACfH,MAAAA,YAAY,CAACJ,aAAD,CAAZ;AACD;AACF;;AAED,WAASU,UAAT,GAAqB;AACnB,QAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAV;;AACA,SAAI,IAAIT,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGQ,GAAG,CAACE,MAAvB,EAA+BV,CAAC,EAAhC,EAAmC;AACjCQ,MAAAA,GAAG,CAACR,CAAD,CAAH,GAAS,EAAT;AACD;;AACDC,IAAAA,YAAY,CAACO,GAAD,CAAZ;AACD;;AAED,WAASG,SAAT,GAAoB;AAClBJ,IAAAA,UAAU;AACVhC,IAAAA,MAAM,CAAC+B,IAAP,CAAY,YAAZ,EAA0B;AAACvB,MAAAA,MAAM,EAAEA;AAAT,KAA1B;AACAC,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD;;AAED,MAAI4B,QAAQ,GAAGzC,WAAW,EAA1B;AACA,QAAM,CAAC0C,MAAD,EAASC,SAAT,IAAsBhD,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AAEA,MAAI0C,GAAG,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAV;;AACA,OAAI,IAAIT,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGQ,GAAG,CAACE,MAAvB,EAA+BV,CAAC,EAAhC,EAAmC;AACjCQ,IAAAA,GAAG,CAACR,CAAD,CAAH,GAAS,EAAT;AACD;;AACD,QAAM,CAACK,SAAD,EAAYJ,YAAZ,IAA4BnC,QAAQ,CAAC0C,GAAD,CAA1C;AAEA,QAAM,CAACtB,QAAD,EAAWD,WAAX,IAA0BnB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACiD,YAAD,EAAe1B,eAAf,IAAkCvB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACsB,MAAD,EAASD,SAAT,IAAsBrB,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMkD,OAAO,GAAG,MAAM;AACpBzC,IAAAA,MAAM,GAAGP,EAAE,CAAC,uBAAD,CAAX;AACAS,IAAAA,cAAc,CAACF,MAAD,CAAd;AACD,GAHD,CA7Ga,CAkHb;AACA;AACA;AACA;AACA;;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACdmD,IAAAA,OAAO,GADO,CAEd;AACA;AACA;AACA;AACA;AACA;AACD,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMC,UAAU,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAGN,MAAM,KAAK,EAAd,EAAiB;AACf,UAAGtC,MAAH,EAAU;AACRA,QAAAA,MAAM,CAAC+B,IAAP,CAAY,WAAZ,EAAyB;AAAC,oBAAUO;AAAX,SAAzB;AACD;;AACD7B,MAAAA,SAAS,CAAC6B,MAAD,CAAT;AACAD,MAAAA,QAAQ,CAAC,WAAWC,MAAZ,CAAR;AACAC,MAAAA,SAAS,CAAC,EAAD,CAAT;AACD,KAPD,MAOK;AACHxB,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACD;AACF,GAZD;;AAcA,QAAM8B,YAAY,GAAIF,CAAD,IAAO;AAC1BJ,IAAAA,SAAS,CAACI,CAAC,CAACG,MAAF,CAASC,KAAV,CAAT;AACD,GAFD;;AAIA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAG,GAAd;AAAkB,QAAA,OAAO,eAAI,QAAC,QAAD;AAAU,UAAA,MAAM,EAAIT,MAApB;AAA4B,UAAA,SAAS,EAAI;AAACI,YAAAA,UAAD;AAAaG,YAAAA;AAAb;AAAzC;AAAA;AAAA;AAAA;AAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAG,eAAd;AAA8B,QAAA,OAAO,eAAI,QAAC,SAAD;AAAW,UAAA,MAAM,EAAIhC,MAArB;AAA6B,UAAA,QAAQ,EAAIF,QAAzC;AACW,UAAA,SAAS,EAAImB,SADxB;AACmC,UAAA,MAAM,EAAItB,MAD7C;AAEW,UAAA,YAAY,EAAIgC,YAF3B;AAGW,UAAA,SAAS,EAAI;AAACb,YAAAA,UAAD;AAAaK,YAAAA,UAAb;AAAyBI,YAAAA;AAAzB;AAHxB;AAAA;AAAA;AAAA;AAAA;AAAzC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAYD;;GAhKQnC,G;UA+FQL,W;;;KA/FRK,G;AAkKT,eAAeA,GAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport {io} from \"socket.io-client\";\nimport {Routes, Route, useNavigate} from \"react-router-dom\";\n\nimport JoinGame from \"./components/JoinGame\";\nimport GameField from \"./components/GameField\";\nimport SocketService from \"./services/SocketService\";\n\nvar socket;\n\nfunction App() {\n\n  const setUpListeners = (socket) => {\n    //Listening for establishing connection with server\n    socket.on(\"connect\", () => {\n      console.log(\"Made connection\");\n    });\n\n    socket.on(\"connect_error\", (err) => {\n      console.log(\"Didn't make connection: \" + err);\n    });\n\n    //Listening for successfully joining the socket's room\n    socket.on(\"join_room_success\", (message) => {\n      console.log(\"Successfully joined the room \" + message.roomId);\n      setRoomId(message.roomId);\n      setIsActive(message.isActive);\n      setFigure(message.figure);\n    });\n\n    //Listening to starting the game - when both players have joined\n    socket.on(\"game_can_start\", () => {\n      setGameCanStart(true);\n    });\n\n    //Listening to ending the game - when any of the players has left\n    socket.on(\"game_finished\", () => {\n      setGameCanStart(false);\n    });\n\n    //Listening for error while joining the socket's room\n    socket.on(\"join_room_error\", (message) => {\n      alert(message.error);\n    });\n\n    //Listening for successfully leaving the socket's room\n    socket.on(\"leave_room_success\", (message) => {\n      console.log(message.roomId);\n      setRoomId(\"\");\n    });\n\n    //Listening for completing the move\n    socket.on(\"end_of_move\", () => {\n      setIsActive(false);\n    });\n\n    //Listening for starting the move\n    socket.on(\"start_of_move\", (opponentsMove) => {\n      let opponentsFigure = opponentsMove.figure;\n      let opponentsPosition = opponentsMove.position;\n      let currentBoardState = opponentsMove.currentBoardState;\n      const tempGameState = currentBoardState.map((boardCell, i) => {\n        return i === opponentsPosition ? opponentsFigure : boardCell;\n      });\n      setGameState(tempGameState);\n      setIsActive(true);\n    });\n  }\n\n  function drawFigure(figure, index){\n    console.log(\"index: \" + index);\n    let abortDrawing = false;\n    const tempGameState = gameState.map((boardCell, i) => {\n      if(i === index){\n        if(boardCell === \"\"){\n          socket.emit(\"new_move\", {figure: figure, position: i});\n          return figure;\n        }else{\n          alert(\"Can't reassign a cell\");\n          abortDrawing = true;\n          return boardCell;\n        }\n      }else{\n        return boardCell;\n      }\n    });\n    if(!abortDrawing){\n      setGameState(tempGameState);\n    }\n  }\n\n  function cleanBoard(){\n    let arr = new Array(9);\n    for(let i = 0; i < arr.length; i++){\n      arr[i] = \"\";\n    }\n    setGameState(arr);\n  }\n\n  function leaveGame(){\n    cleanBoard();\n    socket.emit(\"leave_game\", {roomId: roomId});\n    setRoomId(\"\");\n  }\n\n  let navigate = useNavigate();\n  const [gameId, setGameId] = useState(\"\");\n  const [roomId, setRoomId] = useState(\"\");\n\n  let arr = new Array(9);\n  for(let i = 0; i < arr.length; i++){\n    arr[i] = \"\";\n  }\n  const [gameState, setGameState] = useState(arr);\n\n  const [isActive, setIsActive] = useState(false);\n  const [gameCanStart, setGameCanStart] = useState(false);\n  const [figure, setFigure] = useState(\"\");\n\n  const connect = () => {\n    socket = io(\"http://localhost:9004\");\n    setUpListeners(socket);\n  }\n\n  // const connectSocket = async () => {\n  //   socket = await SocketService.connect(\"http://localhost:9002\").catch((err) => {\n  //     console.log(\"Error: \", err);\n  //   }, []);\n  // }\n\n  useEffect(() => {\n    connect();\n    //---OR---//\n    // SocketService.connect(\"http://localhost:9002\").then((result) => {\n    //   socket = result;\n    // });\n    //---OR---//\n    // connectSocket();\n  }, []);\n\n  const submitForm = (e) => {\n    e.preventDefault();\n    if(gameId !== \"\"){\n      if(socket){\n        socket.emit(\"join_game\", {\"roomId\": gameId});\n      }\n      setRoomId(gameId);\n      navigate(\"/game/\" + gameId);\n      setGameId(\"\");\n    }else{\n      alert(\"Enter the id of the room\");\n    }\n  }\n\n  const changeGameId = (e) => {\n    setGameId(e.target.value);\n  }\n\n  return (\n    <>\n      <Routes>\n        <Route path = \"/\" element = {<JoinGame gameId = {gameId} functions = {{submitForm, changeGameId}}/>}/>\n        <Route path = \"/game/:gameId\" element = {<GameField figure = {figure} isActive = {isActive}\n                                                            gameState = {gameState} roomId = {roomId}\n                                                            gameCanStart = {gameCanStart}\n                                                            functions = {{drawFigure, cleanBoard, leaveGame}}/>}/>\n      </Routes>\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}