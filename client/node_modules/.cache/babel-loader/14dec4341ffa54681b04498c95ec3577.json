{"ast":null,"code":"import { io } from \"socket.io-client\"; //class with methods for interacting with the sockets on the server\n\nlet SocketService = Object.create({});\nconsole.log(SocketService.prototype);\n\nSocketService.prototype.connect = function (url) {\n  //connects to server and returns socket instance\n  return new Promise((resolve, reject) => {\n    this.socket = io(url);\n\n    if (!this.socket) {\n      reject(new Error(\"socket not created!\"));\n    }\n\n    this.socket.on(\"connect\", () => {\n      console.log(\"Made connection\");\n      resolve(this.socket);\n    });\n    this.socket.on(\"connect_error\", err => {\n      console.log(\"Didn't make connection\");\n      reject(new Error(err));\n    });\n  });\n};\n\nexport default SocketService;","map":{"version":3,"sources":["/home/yagodka/Desktop/tic-tac-toe/client/src/services/SocketService.js"],"names":["io","SocketService","Object","create","console","log","prototype","connect","url","Promise","resolve","reject","socket","Error","on","err"],"mappings":"AAAA,SAAQA,EAAR,QAAiB,kBAAjB,C,CAEA;;AACA,IAAIC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAApB;AACAC,OAAO,CAACC,GAAR,CAAYJ,aAAa,CAACK,SAA1B;;AACAL,aAAa,CAACK,SAAd,CAAwBC,OAAxB,GAAkC,UAAUC,GAAV,EAAc;AAC9C;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,SAAKC,MAAL,GAAcZ,EAAE,CAACQ,GAAD,CAAhB;;AAEA,QAAG,CAAC,KAAKI,MAAT,EAAgB;AACdD,MAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACD;;AAED,SAAKD,MAAL,CAAYE,EAAZ,CAAe,SAAf,EAA0B,MAAM;AAC9BV,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAK,MAAAA,OAAO,CAAC,KAAKE,MAAN,CAAP;AACD,KAHD;AAKA,SAAKA,MAAL,CAAYE,EAAZ,CAAe,eAAf,EAAiCC,GAAD,IAAS;AACvCX,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAM,MAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAUE,GAAV,CAAD,CAAN;AACD,KAHD;AAID,GAhBM,CAAP;AAiBD,CAnBD;;AAuBA,eAAed,aAAf","sourcesContent":["import {io} from \"socket.io-client\";\n\n//class with methods for interacting with the sockets on the server\nlet SocketService = Object.create({});\nconsole.log(SocketService.prototype);\nSocketService.prototype.connect = function (url){\n  //connects to server and returns socket instance\n  return new Promise((resolve, reject) => {\n    this.socket = io(url);\n\n    if(!this.socket){\n      reject(new Error(\"socket not created!\"));\n    }\n\n    this.socket.on(\"connect\", () => {\n      console.log(\"Made connection\");\n      resolve(this.socket);\n    });\n\n    this.socket.on(\"connect_error\", (err) => {\n      console.log(\"Didn't make connection\");\n      reject(new Error(err));\n    });\n  });\n}\n\n\n\nexport default SocketService;\n"]},"metadata":{},"sourceType":"module"}